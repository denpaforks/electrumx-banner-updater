#!/bin/sh

# update electrumx banner to report bitcoin memory pool, fees, height and time since last block
# activate with cron job similar to this
#*/2 * * * *  ~/bin/update-electrumx-banner

# specify your bitcoin-cli location
BITCOIN_CLI=/usr/bin/bitcoin-cli

# specify your bitcoin data directory
BITCOIN_DATADIR=~/.bitcoin

# specify the location of your electrumx banner file
# note: uses %{BANNER}.template as the template (top portion) of each banner update
BANNER=~/.electrumx/banner

# specify path to electrumx_rpc.py (.py removed as of 1.5)
ELECTRUMX_RPC=/usr/local/bin/electrumx_rpc

# specify electrumx RPC port
RPC_PORT=8000

# specify path to tor
TOR=

# specify date format
DATE_FORMAT='%a %b %d %T %Z %Y'

NAME=`basename $0`
CONFIG=/etc/${NAME}.conf
[ -f ${CONFIG} ] && . ${CONFIG}

TFILE=`mktemp -t ${NAME}.XXXXXX`
if [ $? -ne 0 ]; then
	echo "${NAME}: Can't create temp file, exiting..."
	exit 1
fi

# save initial banner as template for creation of new banners
[ ! -f ${BANNER}.template ] && cp ${BANNER} ${BANNER}.template

# create new banner from template
cp ${BANNER}.template ${BANNER}.new

# replace $TOR_VERSION in banner with actual tor version
if [ -n "${TOR}" ]; then
	TOR_VERSION=`${TOR} --version | cut -f3,4 -d' '`
	sed -i -e "s/\$TOR_VERSION/${TOR_VERSION%?}/g" ${BANNER}.new
fi

# electrum network status
${ELECTRUMX_RPC} getinfo > $TFILE
mySessions=`grep sessions $TFILE | grep -o '[0-9]*'`
goodPeers=`grep good $TFILE | grep -o '[0-9]*'`
txsSent=`grep txs_sent $TFILE | grep -o '[0-9]*'`

# server start date
serverPid=`grep pid $TFILE | grep -o '[0-9]*'`
startDate=`ps -eo pid,lstart | grep ${serverPid} | cut -f2-6 -d' '`
fmtStartDate=`date +"$DATE_FORMAT" -ud "$(date -d "${startDate}")"`

echo There are currently ${goodPeers} public electrum servers. >> ${BANNER}.new
echo This server has ${mySessions} anonymous electrum connections. >> ${BANNER}.new
echo ${txsSent} transactions were broadcasted since ${fmtStartDate}. >> ${BANNER}.new
echo "" >> ${BANNER}.new

# timestamp
printf "As of %s " "$(date +"$DATE_FORMAT" -u)" >> ${BANNER}.new

# mempool
MEMPOOL=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} getmempoolinfo | grep size | grep -o '[0-9\.]*'`
printf "there are %d transactions in the memory pool\n" ${MEMPOOL} >> ${BANNER}.new

# report last block and current height from electrumx journal
journalctl --since "6 hours ago" -u electrumx -o short-iso --utc | grep Prefetcher:new | tail -n 1 > ${TFILE}
if [ `wc -c < ${TFILE}` -gt 10 ]; then
	block_height=`< ${TFILE} awk '{print $7}'`
	block_time=`< ${TFILE} awk '{print $1}'`
	block_utime=`date -ud $block_time +'%s'`
	now_utime=`date +'%s'`
	minutes_ago=`echo ${now_utime} ${block_utime} | awk '{print int(($1-$2)/6)/10}'`
	echo "Last block: ${minutes_ago} minutes ago; current height: ${block_height}" >> ${BANNER}.new
fi
rm ${TFILE}

# get exchange rate and average fee per satoshi
TICKER=BTC
BYTESPERTX=168
if ${BITCOIN_CLI} --version | grep -q ABC; then
	TICKER=BCH
	BYTESPERTX=226
fi
USDPERBTC=`curl -m 10 -L -s "https://apiv2.bitcoinaverage.com/indices/global/ticker/${TICKER}USD" | grep last | grep -o "[0-9.]*"`
USDPERSAT=`echo ${USDPERBTC} | awk '{print $1/100000000}'`

echo "Current exchange rate = ${USDPERBTC} USD/${TICKER}; typical TX size = ${BYTESPERTX} bytes" >> ${BANNER}.new

# report fees for various block times
for BLOCKS in 2 6 12 24 144 288 504 1008
do
	case "${TICKER}" in
		"BTC")
			FEERATE=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} estimatesmartfee ${BLOCKS} | grep feerate | grep -o '[0-9\.\-]*'`
			;;
		"BCH")
			FEERATE=`${BITCOIN_CLI} -datadir=${BITCOIN_DATADIR} estimatefee ${BLOCKS}`
			;;
		*)
			break
			;;
	esac

	SATPERBYTE=`echo ${FEERATE} | awk '{print $1*100000+0.5}'`
	# do not estimate further block times once fee reaches 1 sat/B
	[ -n "${INTSATPERBYTE}" ] && [ "${INTSATPERBYTE}" -le 1 ] && break
	INTSATPERBYTE=`echo ${SATPERBYTE} | awk '{print int($1)}'`
	echo ${BLOCKS} ${SATPERBYTE} ${BYTESPERTX} ${USDPERSAT} | awk '{printf "Estimated miner fee for confirmation in %d blocks (%s hours) = %d sat/B (%d sat or $%0.2f)\n", $1, int($1/0.06)/100, $2, $2*$3, $2*$3*$4 }' >> ${BANNER}.new
done

# save backup of original banner on first run (just in case...)
[ ! -f ${BANNER}.backup ] && cp ${BANNER} ${BANNER}.backup

# replace banner with newly generated version
mv ${BANNER}.new ${BANNER}
